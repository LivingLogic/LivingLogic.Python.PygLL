<?whitespace smart?>
<?doc
	Create the Python source code for our Pygments styles.

	This is done via this UL4 template, so that we can use proper color
	arithmetic, but the user that installs the style doesn't require an
	installation of UL4/XIST.

	For more information about XIST and UL4, see http://python.livinglogic.de/,
	to install XIST/UL4 execute ``pip install ll-xist``.

	The basic approach for defining styles for both dark and light backgrounds
	is to use the same color for each style, but with a different luminance.

	For dark backgrounds (where the colors are light), this is done by the
	template ``make_dark_style``.

	For light backgrounds (where the colors are dark), this is done by the
	template ``make_light_style``. To make the colors more distinguishable
	from grey the saturation is also increased to 1.

	This means that most styles share one luminance values except for
	special styles (e.g. escape sequences in strings use the same color as
	strings but "faded", i.e. with a luminance closed to the text color).

	For some styles (keywords and string constants, which are blue and green)
	this still gives colors to close to a grey with the same luminance, so
	we're going to use custom colors here.
?>
# Copyright 2021 by LivingLogic AG, Bayreuth/Germany
# Copyright 2021 by Walter DÃ¶rwald
#
# All Rights Reserved
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from pygments import token, style
<?code make_dark_style = globals.templates.make_dark_style?>
<?code make_light_style = globals.templates.make_light_style?>
<?note
	The basic text color. This doesn not use the standard luminance, but is
	nearly black on light backgrounds and nearly white on dark ones.
?>
<?code base = #000?>
<?note
	Keywords are blue, use custom colors for the light and dark style.
?>
<?code keyword_dark = #087fc8?>
<?code keyword_light = #05f?>
<?note
	String constants are green, use custom colors for the light and dark style.
?>
<?code string_dark = #a5c341?>
<?code string_light = #0a0?>
<?note
	Numeric contants are purple
?>
<?code number = #c0c?>
<?note
	Date constants (``@(2000-02-29)``) and color constant (``#fff``) are cyan.
?>
<?code date = #6ff?>
<?code color_ = #6ff?>
<?note
	All other constance (``None``, ``True``, ``False`` etc.) are orange.
?>
<?code const = #f90?>
<?note
	Magic methods etc. (i.e. dunder methods in Python) have a color between
	normal text and keywords.
?>
<?code magic = #009?>
<?note
	Prompt colors for interactive IPython console: green for input, red for output.
?>
<?code ipython_input = #0f0?>
<?code ipython_output = #f00?>
<?note
	XML/HTML element names are orange
?>
<?code xml_tag = #f60?>
<?note
	XML/HTML processing instructions are cyan
?>
<?code xml_pi = #0ff?>
<?note
	XML/HTML attribute names are a mix of the colors for element and string
	constants
?>
<?code xml_attr = color.mix(xml_tag, string)?>
<?note
	Reserved keywords use colors between the keyword colors and the color
	for XML/HTML elements.
?>
<?code keyword_reserved_dark = color.mix(keyword_dark, 3, xml_tag)?>
<?code keyword_reserved_light = color.mix(keyword_light, 3, xml_tag)?>
<?note
	XML/HTML entity and character references are purple.
?>
<?code xml_entref = #c0c?>


<?render globals.templates.make_style(
	name="LivingLogicLightStyle",
	doc="The 'LivingLogic' style, light version",
	background_color="#00000003",
	highlight_color="#0f02",
	line_number_color=make_light_style(base).rellum(0.2),
	line_number_background_color="transparent",
	line_number_special_color=make_light_style(base).rellum(0.1),
	line_number_special_background_color="transparent",
	base_color=base.withlum(0.1),
	prompt_color=make_light_style(base).rellum(0.5),
	output_color=make_light_style(base).rellum(0.2),
	error_color=make_light_style(#f00),
	comment_color=make_light_style(base),
	keyword_color=make_light_style(keyword_light),
	keywordreserved_color=make_light_style(keyword_reserved_light),
	number_color=make_light_style(number),
	string_color=string_light,
	stringfade_color=string_light.rellum(-0.4),
	date_color=make_light_style(date),
	color_color=make_light_style(color_),
	const_color=make_light_style(const),
	docstring_color=color.mix(1, string_light, 3, make_light_style(base)),
	magic_color=color.mix(1, make_light_style(keyword_light), 2, base.withlum(0.1)),
	xml_tag_color=make_light_style(xml_tag),
	xml_attr_color=make_dark_style(xml_attr).rellum(-0.1).withsat(0.5),
	xml_pi_color=make_light_style(xml_pi),
	xml_entref_color=make_light_style(xml_entref),
	ipython_input_color=make_light_style(ipython_input),
	ipython_inputnum_color=make_light_style(ipython_input).rellum(-0.2),
	ipython_output_color=make_light_style(ipython_output),
	ipython_outputnum_color=make_light_style(ipython_output).rellum(-0.2),
)?>


<?render globals.templates.make_style(
	name="LivingLogicDarkStyle",
	doc="The 'LivingLogic' style, dark version",
	background_color="#ffffff03",
	highlight_color="#030",
	line_number_color=make_dark_style(base).rellum(-0.2),
	line_number_background_color="transparent",
	line_number_special_color=make_dark_style(base).rellum(-0.1),
	line_number_special_background_color="transparent",
	base_color=base.withlum(0.9),
	prompt_color=make_dark_style(base).rellum(-0.3),
	output_color=make_dark_style(base).rellum(-0.1),
	error_color=make_dark_style(#f00),
	comment_color=make_dark_style(base),
	keyword_color=make_dark_style(keyword_dark),
	keywordreserved_color=make_dark_style(keyword_reserved_dark),
	number_color=make_dark_style(number),
	string_color=make_dark_style(string_dark),
	stringfade_color=make_dark_style(string_dark).rellum(0.5),
	date_color=make_dark_style(date),
	color_color=make_dark_style(color_),
	const_color=make_dark_style(const),
	docstring_color=color.mix(1, make_dark_style(string_dark), 3, make_dark_style(base)),
	magic_color=color.mix(1, make_dark_style(keyword_dark), 2, base.withlum(0.9)),
	xml_tag_color=make_dark_style(xml_tag),
	xml_attr_color=make_dark_style(xml_attr).rellum(0.1).withsat(0.5),
	xml_pi_color=make_dark_style(xml_pi),
	xml_entref_color=make_dark_style(xml_entref),
	ipython_input_color=make_dark_style(ipython_input),
	ipython_inputnum_color=make_dark_style(ipython_input).rellum(0.5),
	ipython_output_color=make_dark_style(ipython_output),
	ipython_outputnum_color=make_dark_style(ipython_output).rellum(0.5),
)?>
