<?ul4 make_style(
	name,
	doc,
	background_color,
	highlight_color,
	line_number_color,
	line_number_background_color,
	line_number_special_color,
	line_number_special_background_color,
	base_color,
	prompt_color,
	output_color,
	error_color,
	comment_color,
	keyword_color,
	keywordreserved_color,
	number_color,
	string_color,
	stringfade_color,
	date_color,
	color_color,
	const_color,
	docstring_color,
	magic_color,
	xml_tag_color,
	xml_attr_color,
	xml_pi_color,
	xml_entref_color,
	ipython_input_color,
	ipython_inputnum_color,
	ipython_output_color,
	ipython_outputnum_color,
)?>
<?whitespace smart?>
<?doc

	Output a Python class with a complete style definition

?>
class <?print name?>(style.Style):
	"""
	<?print doc?>
	"""

	# overall background color (``None`` means transparent)
	background_color = <?print repr(str(background_color))?>

	# highlight background color
	highlight_color = <?print repr(str(highlight_color))?>

	# line number font color
	line_number_color = <?print repr(str(line_number_color))?>

	# line number background color
	line_number_background_color = <?print repr(str(line_number_background_color))?>

	# special line number font color
	line_number_special_color = <?print repr(str(line_number_special_color))?>

	# special line number background color
	line_number_special_background_color = <?print repr(str(line_number_special_background_color))?>

	styles = {
		token.Token:                <?print repr(str(base_color))?>,
		token.Generic.Output:       <?print repr(str(output_color))?>,
		token.Generic.Prompt:       <?print repr(str(prompt_color))?>,
		token.Generic.Error:        <?print repr(str(error_color))?>,
		token.Generic.Traceback:    <?print repr(str(error_color))?>,
		token.Comment:              <?print repr(str(comment_color))?>,
		token.Number:               <?print repr(str(number_color))?>,
		token.String:               <?print repr(str(string_color))?>,
		token.String.Doc:           <?print repr(str(docstring_color))?>,
		token.String.Interpol:      <?print repr(str(stringfade_color))?>,
		token.String.Delimiter:     <?print repr(str(stringfade_color))?>,
		token.String.Escape:        <?print repr(str(stringfade_color))?>,
		token.String.Affix:         <?print repr(str(stringfade_color))?>,
		token.Token.Literal.Date:   <?print repr(str(date_color))?>,
		token.Token.Literal.Color:  <?print repr(str(color_color))?>,
		token.Keyword:              <?print repr(str(keyword_color))?>,
		token.Keyword.Reserved:     <?print repr(str(keywordreserved_color))?>,
		token.Operator:             <?print repr(str(keyword_color))?>,
		token.Operator.Word:        <?print repr(str(keyword_color))?>,
		token.Keyword.Constant:     <?print repr(str(const_color))?>,
		token.Name:                 <?print repr(str(base_color))?>,
		token.Name.Class:           <?print repr(str(base_color) + " bold")?>,
		token.Name.Function:        <?print repr(str(base_color) + " bold")?>,
		token.Name.Namespace:       <?print repr(str(base_color))?>,
		token.Name.Builtin.Pseudo:  <?print repr(str(magic_color))?>,
		token.Name.Variable.Magic:  <?print repr(str(magic_color))?>,
		token.Name.Function.Magic:  <?print repr(str(magic_color))?>,
		token.Name.Tag:             <?print repr(str(xml_tag_color))?>,
		token.Name.Attribute:       <?print repr(str(xml_attr_color))?>,
		token.Name.Entity:          <?print repr(str(xml_entref_color))?>,
		token.Comment.Preproc:      <?print repr(str(xml_pi_color))?>,
		token.Token.Prompt:         <?print repr(str(ipython_input_color))?>,
		token.Token.PromptNum:      <?print repr(str(ipython_inputnum_color))?>,
		token.Token.OutPrompt:      <?print repr(str(ipython_output_color))?>,
		token.Token.OutPromptNum:   <?print repr(str(ipython_outputnum_color))?>,
	}
